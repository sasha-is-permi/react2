{"version":3,"sources":["Main/pine.jpg","Main/Main.js","News/birch.jpg","News/News.js","Profile/Profile.js","App.js","reportWebVitals.js","redux/rootReducer.js","index.js"],"names":["Main","className","this","props","h2Tree","textTree1","textTree2","textTree3","textTree4","textTree5","textTree6","textTree7","src","pine","alt","Component","connect","state","News","textBirch","birch","Profile","App","Fragment","to","exact","activeClassName","path","component","render","style","color","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","app","ReactDOM","document","getElementById"],"mappings":"gUAAe,G,MAAA,IAA0B,kC,OCOnCA,E,4JACJ,WAEA,OACE,sBAAKC,UAAU,OAAf,UACA,mCAAMC,KAAKC,MAAMC,OAAjB,OACA,8BACEF,KAAKC,MAAME,UACb,uBAAO,uBACLH,KAAKC,MAAMG,UACb,uBAJA,IAIQ,uBACNJ,KAAKC,MAAMI,UACb,uBANA,IAMQ,uBACPL,KAAKC,MAAMK,UACZ,uBARA,IAQQ,uBACPN,KAAKC,MAAMM,UACZ,uBAVA,IAUQ,uBACPP,KAAKC,MAAMO,UACZ,uBAZA,KAYS,uBACRR,KAAKC,MAAMQ,aAGX,qBAAKV,UAAU,UAAf,SACI,qBAAKW,IAAKC,EAAMZ,UAAU,OAAOa,IAAI,mG,GAvB3BC,aAiDJC,mBAdf,SAAyBC,GACvB,MAAM,CACJb,OAAOa,EAAMb,OACbC,UAAWY,EAAMZ,UACjBC,UAAWW,EAAMX,UACjBC,UAAWU,EAAMV,UACjBC,UAAWS,EAAMT,UACjBC,UAAWQ,EAAMR,UACjBC,UAAWO,EAAMP,UACjBC,UAAWM,EAAMN,aAKNK,CAAyBhB,GCxDzB,G,MAAA,IAA0B,mCCKnCkB,E,4JACF,WAEA,OACD,sBAAKjB,UAAU,OAAf,UACA,4BACIC,KAAKC,MAAMgB,YAGd,qBAAKlB,UAAU,YAAf,SACI,qBAAKW,IAAKQ,EAAOnB,UAAU,QAAQa,IAAI,kD,GAV5BC,aA6BFC,mBARjB,SAAyBC,GACrB,MAAM,CACJE,UAAWF,EAAME,aAMNH,CAAyBE,GCzB3BG,G,MANC,SAAAlB,GAAK,OAClB,qBAAKF,UAAU,UAAf,SACG,iHCMAqB,E,4JAEH,WACG,OACG,cAAC,IAAMC,SAAP,UACE,sBAAKtB,UAAU,MAAf,UAKF,qBAAKA,UAAU,MAAf,SACI,+BACC,6BACC,cAAC,IAAD,CAASuB,GAAG,IACZC,OAAK,EACLC,gBAAiB,aAFjB,4DAMD,6BACE,cAAC,IAAD,CAASF,GAAG,QAAZ,0DAGF,6BACE,cAAC,IAAD,CAASA,GAAG,WAAZ,+DAQN,eAAC,IAAD,WAEG,cAAC,IAAD,CAAOG,KAAK,IAAIF,OAAK,EAACG,UAAW5B,IAEjC,cAAC,IAAD,CAAO2B,KAAK,QAAQC,UAAWV,IAE/B,cAAC,IAAD,CAAOS,KAAK,WAAWC,UAAWP,IAElC,cAAC,IAAD,CAAOQ,OAAQ,kBAAM,oBAAIC,MAAO,CAACC,MAAO,MAAOC,UAAW,UAArC,yHARxB,gB,GAhCQjB,aA0DHC,mBAPf,SAAyBC,GACvB,MAAM,KAMOD,CAAyBM,GCzDzBW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCPRQ,EAAc,CAEhBtC,OAAO,wFACPC,UAAU,2kHAQVC,UAAU,o4KAUVC,UAAU,imCAIVC,UAAU,uhKASVC,UAAU,qwEAMVC,UAAU,g8EAKVC,UAAU,ooIAQTQ,UAAU,uxJC1Cf,IAAMwB,EAAQC,aDwDC,WAAkD,IAA7B3B,EAA4B,uDAAtByB,EACtC,OAAOzB,KCtDL4B,EACH,cAAC,IAAD,UACE,eAAC,IAAD,CAAUF,MAAOA,EAAjB,cACE,cAAC,EAAD,SAOPG,IAASjB,OAAOgB,EAAME,SAASC,eAAe,SAE9Cf,M","file":"static/js/main.36103c2f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pine.a11b3a01.jpg\";","import React, {Component} from 'react'\r\nimport './Main.scss'\r\nimport pine from './pine.jpg';  \r\nimport {connect} from 'react-redux' // connect- позволяет соединить Main со store. работает как hoc  \r\n\r\n\r\n\r\nclass Main extends Component{\r\n  render(){\r\n\r\n  return(  \r\n    <div className=\"Main\">\r\n    <h2> {this.props.h2Tree} </h2>\r\n    <p> \r\n     {this.props.textTree1}\r\n   {<br/>}{<br/>}\r\n     {this.props.textTree2}\r\n   {<br/>} {<br/>}\r\n     {this.props.textTree3} \r\n   {<br/>} {<br/>}\r\n    {this.props.textTree4}\r\n   {<br/>} {<br/>}\r\n    {this.props.textTree5}\r\n   {<br/>} {<br/>}\r\n    {this.props.textTree6}\r\n   {<br/>}  {<br/>}\r\n    {this.props.textTree7}\r\n     </p>\r\n \r\n     <div className=\"divPine\"> \r\n         <img src={pine} className=\"pine\" alt=\"Хвойные деревья\"/>\r\n     </div>  \r\n     \r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n// Данные из state станут обычными параметрами для компонента (props)\r\nfunction mapStateToProps(state){\r\n  return{\r\n    h2Tree:state.h2Tree,\r\n    textTree1: state.textTree1,\r\n    textTree2: state.textTree2,\r\n    textTree3: state.textTree3,\r\n    textTree4: state.textTree4,\r\n    textTree5: state.textTree5,\r\n    textTree6: state.textTree6,\r\n    textTree7: state.textTree7\r\n  }\r\n}\r\n\r\n// После вызова функции туда кладем компонент Main\r\nexport default connect(mapStateToProps)(Main);\r\n\r\n","export default __webpack_public_path__ + \"static/media/birch.1fd0c99d.jpg\";","import React, {Component} from 'react'\r\nimport './News.scss'\r\nimport birch from './birch.jpg';  \r\nimport {connect} from 'react-redux' // connect- позволяет соединить News со store. работает как hoc  \r\n\r\nclass News extends Component{\r\n    render(){\r\n  \r\n    return(  \r\n   <div className=\"News\">\r\n   <p>   \r\n      {this.props.textBirch}\r\n   </p>\r\n\r\n    <div className=\"divBirch1\"> \r\n        <img src={birch} className=\"birch\" alt=\"Береза\"/>\r\n    </div>  \r\n    \r\n   </div>   \r\n\r\n)\r\n    }\r\n}\r\n\r\n\r\n// Данные из state станут обычными параметрами для компонента (props)\r\nfunction mapStateToProps(state){\r\n    return{      \r\n      textBirch: state.textBirch\r\n    \r\n    }\r\n  }\r\n  \r\n  // После вызова функции туда кладем компонент News\r\n  export default connect(mapStateToProps)(News);\r\n","import React from 'react'\r\nimport './Profile.scss'\r\n\r\nconst Profile = props => (\r\n   <div className=\"Profile\">\r\n      <h1> Файл настроек </h1>   \r\n   </div>\r\n)\r\n\r\nexport default Profile","import React, {Component} from 'react';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport {connect} from 'react-redux' // connect- позволяет соединить App со store. работает как hoc  \n\nimport Main from './Main/Main'\nimport News from './News/News'\nimport Profile from './Profile/Profile'\n\n\n// Создаем компонент-класс\nclass App extends Component{\n    \n   render(){\n      return(\n         <React.Fragment>\n           <div className=\"App\"> \n\n\n       {/*   Чтобы сделать навигацию без перезагрузки страницы: используем  NavLink */}\n\n         <nav className=\"nav\">\n             <ul>\n              <li>\n               <NavLink to=\"/\"\n               exact\n               activeClassName={'wfm-active'} // используем не стандартный класс active для активного элемента\n               > Главная </NavLink>\n              </li>\n\n              <li>\n                <NavLink to=\"/news\">Новости</NavLink>\n              </li>\n\n              <li>\n                <NavLink to=\"/profile\">Профиль</NavLink>\n              </li>\n            </ul>\n         </nav>\n\n          \n          {/* При данном пути- переходим в другой компонент */}\n          \n          <Switch>\n\n             <Route path=\"/\" exact component={Main} />\n           \n             <Route path=\"/news\" component={News} />\n\n             <Route path=\"/profile\" component={Profile} />\n \n             <Route render={() => <h1 style={{color: 'red', textAlign: 'center'}}>Страница не найдена</h1>} /> {/* если введен неправильный адрес страницы */}\n\n          </Switch>\n\n           </div>  \n         </React.Fragment> \n      )    \n    }\n}\n\n// Данные из state станут обычными параметрами для компонента (props)\nfunction mapStateToProps(state){\n  return{\n   \n  }\n}\n\n// После вызова функции туда кладем компонент App\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState= {\r\n\r\n    h2Tree: `Хвойные деревья`,\r\n    textTree1:`\r\n    Сосна́ (лат. Pínus) — типовой род хвойных деревьев семейства Сосновые (Pinaceae). \r\n    По современным данным в мире насчитывается около 120 видов[6] сосны, которые в естественном произрастании рассеяны по всему \r\n    Северному полушарию от экватора до заполярья. В умеренном и субарктическом климате они образуют леса на равнинах, а в субтропиках, \r\n    тропиках и вблизи экватора произрастают в горах. Используется не только как источник древесины, но и в химической и фармацевтической промышленности.\r\n     Плодоносящие виды сосны, дающие съедобные орехи, условно объединяются под названием кедровые сосны. Однако надо помнить, что Кедр (Cedrus) — другой род деревьев \r\n     того же семейства, а семена сосны не являются орехами в ботаническом смысле.  \r\n    `,\r\n    textTree2:`\r\n    Сосна относится к весьма светолюбивым древесным породам, однако зачастую образует чистые насаждения — сосновый бор.\r\n    Причина этого явления заключается в том, что сосна являясь одной из наименее требовательных к почве древесных пород, \r\n    может расти на таких малоплодородных почвах, на которых рост других деревьев оказывается почти невозможным. \r\n    Такое преимущество соснам даёт поверхностный тип корневой системы, который может развиваться в тонком (1—2 см) слое плодородной почвы, \r\n    лежащей на песках. Например, в Карелии сосны могут иметь обширную корневую систему (имея отдельные корневые побеги длиной до 20 метров у взрослых деревьев), \r\n    расположенную в слое всего 1 см толщиной. Такими типичными для чистых сосновых насаждений почвами являются сухие песчаные, на которых и заселяются сосновые боры.\r\n     Характерной особенностью таких боров является их одновозрастность, объясняемая тем, что даже в наименее населённых местностях они сильно страдают от лесных пожаров и,\r\n      легко обсеменяясь после каждого из них, вырастают вновь в виде одновозрастных насаждений.\r\n    `,\r\n    textTree3:`\r\n    Ель (лат. Pícea) — род деревьев семейства Сосновые (Pinaceae). Насчитывает около 35 видов вечнозелёных высоких деревьев (до 30 м высотой) с красивой кроной.\r\n    Ель является одним из главных символов европейского Нового года и Рождества.\r\n    `,\r\n    textTree4:`\r\n    Кедр (лат. Cedrus) — олиготипный род деревьев семейства Сосновые (Pinaceae). В природе ареал рода охватывает южные и восточные горные районы\r\n    Средиземноморья и западные районы Гималаев. Представители рода однодомные, вечнозелёные деревья высотой до 40—50 метров, с раскидистой кроной. \r\n    Кора тёмно-серая, на молодых стволах гладкая, на старых растрескивающаяся, чешуйчатая. Хвоя игловидная, трёх- или четырёхгранная, жёсткая, колючая, тёмно- \r\n    или сине-зелёная до серебристо-серой, со всех сторон снабженная устьицами, сидит на листовых подушках, собрана в пучки по 30—40 шт. Побеги укороченные и удлинённые, \r\n    последние несут спирально расположенную хвою. Семена, ввиду смолистости, не поедаются грызунами. Растения требуют не уплотнённой сверху и хорошо водопроницаемых почв;\r\n     очень чувствительны к застаиванию воды в почве (особенно кедр гималайский (Cedrus deodara)). Благодаря своей декоративности и быстроте роста кедры ценны для парковых \r\n     насаждений как в группах, так и одиночно. Особенно ценны голубые и серебристые формы.\r\n    `,\r\n    textTree5:`\r\n    Ли́ственница (лат. Lárix) — род древесных растений семейства Сосновые, одна из наиболее распространённых пород хвойных деревьев.\r\n    Хвоя однолетняя, мягкая. Сплюснутая, ярко-зелёная, расположена на удлинённых побегах спирально и поодиночке, а на укороченных — пучками,\r\n     до 40 штук в каждом. В благоприятных условиях вырастает до 50 и более метров в высоту при диаметре ствола до 1 м и более. Доживает до 300—400 лет,\r\n      зарегистрированы лиственницы возрастом до 800 лет.\r\n    `,\r\n    textTree6:`\r\n    Пи́хта (лат. Ábies) — род голосеменных растений семейства Сосновые (Pinaceae). Пирамидальные деревья, несущие кольчато расположенные горизонтальные ветви.\r\n    Листья игольчатые (хвоя), плоские, у основания суженные в короткий черешок. Распространены в умеренных областях Северного полушария. Наиболее богатые видами области:\r\n     запад Северной Америки (побережье Тихого океана) и Восточная Азия (особенно Япония). Характерная особенность пихт — шишки у них, в отличие от других хвойных, растут вверх.\r\n    `,\r\n    textTree7:`\r\n    Тсу́га (лат. Tsúga) — род хвойных вечнозелёных деревьев семейства Сосновые (Pinaceae). Вечнозелёные деревья средних либо крупных размеров, \r\n    высотой 20—65 метров. Крона коническая либо несимметрично яйцевидная (у некоторых азиатских видов), основные побеги обычно опадают, свисают.\r\n     Кора серая или коричневая, чешуйчатая, часто с глубокими трещинами. Ветви горизонтальные, часто сплющены и изогнуты вниз. Укороченные побеги умеренно развитые;\r\n      молодые веточки и периферийные части стебля извилистые и свисающие, грубеют от крючковатых выступов после того, как лист опадает. Распространена в умеренных широтах Азии\r\n       (Гималаи, Китай, Япония) и Северной Америки. Родиной считается Япония. На территории России и сопредельных стран интродуцировано (ввезено) несколько видов, в том \r\n       числе Тсуга канадская (Tsuga canadensis) и Тсуга разнолистная (Tsuga diversifolia).\r\n        `,\r\n     textBirch:`\r\n     Берёза (лат. Bétula) — род листопадных деревьев и кустарников семейства Берёзовые (Betulaceae). \r\n     Берёза широко распространена в Северном полушарии; на территории России принадлежит к числу наиболее распространённых древесных пород. \r\n     Общее число видов — около ста[3] или немного больше[4]. Многие виды берёзы — широко распространённые и важнейшие лесообразующие породы,\r\n     в значительной мере определяющие облик и видовой состав лиственных и хвойно-лиственных (смешанных) лесов в умеренной и холодной части Евразии и Северной Америки.\r\n     Многие части берёзы используются в хозяйстве: древесина, кора, берёста (поверхностный слой коры), берёзовый сок.\r\n     Почки и листья применяют в медицине: настои из почек и листьев — как мочегонное, бактерицидное, ранозаживляющее и жаропонижающее средство,\r\n      а масляную вытяжку из берёзовых почек — как дерматологическое средство. Некоторые виды используют для создания полезащитных полос, \r\n      а также в декоративном садоводстве.\r\n       `\r\n    \r\n       \r\n}\r\n\r\nexport default function rootReducer(state=initialState, action) {\r\n    return state // пока не изменяем state- просто возвращаем\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom' //для использования react-router\nimport {createStore} from 'redux' // импортируем функцию createStore для использования store\nimport {Provider} from 'react-redux' // оборачиваеем приложение в тег Provider чтобы показать что работаем с redux\nimport rootReducer from './redux/rootReducer' // импортируем функцию rootReducer из js файла\n\n\nconst store = createStore(rootReducer) // создаем store. rootReducer- это фактически правило для изменения state (rootReducer - функция, изменяющая state)\n\n// BrowserRouter -  hoc-компонент, который оборачивает наш компонент для использования router \nconst app = (\n   <BrowserRouter>    \n     <Provider store={store}> {/* Передаем store в компонент App. store создается функцией createStore() используя функцию rootReducer  */}\n       <App/>   \n     </Provider>\n\n   </BrowserRouter>\n)\n\n\nReactDOM.render(app,  document.getElementById('root') );\n\nreportWebVitals();\n"],"sourceRoot":""}